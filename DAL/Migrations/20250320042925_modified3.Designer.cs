// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(FunewsManagementSystemContext))]
    [Migration("20250320042925_modified3")]
    partial class modified3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ParentCategoryID");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.NewsArticle", b =>
                {
                    b.Property<int>("NewsArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NewsArticleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsArticleId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NewsContent")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("NewsSource")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NewsStatus")
                        .HasColumnType("int");

                    b.Property<string>("NewsTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedByID");

                    b.HasKey("NewsArticleId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("NewsArticle", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.SystemAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccountRole")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.ToTable("SystemAccount", (string)null);

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            AccountEmail = "admin@FUNewsManagementSystem.org",
                            AccountName = "Admin",
                            AccountPassword = "9C7A7A446B167778CEFAD8F3F896B56F15EEFD0283C88B094BE6BF6009E2F90A-413D4B25C4964C5F3E8FC50AC16F406B",
                            AccountRole = 0
                        });
                });

            modelBuilder.Entity("DAL.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TagId");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("NewsTag", b =>
                {
                    b.Property<int>("NewsArticleId")
                        .HasColumnType("int")
                        .HasColumnName("NewsArticleID");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.HasKey("NewsArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("NewsTag", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.HasOne("DAL.Entities.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK_Category_Category");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("DAL.Entities.NewsArticle", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany("NewsArticles")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_NewsArticle_Category");

                    b.HasOne("DAL.Entities.SystemAccount", "CreatedBy")
                        .WithMany("NewsArticleCreatedBies")
                        .HasForeignKey("CreatedById")
                        .IsRequired()
                        .HasConstraintName("FK_NewsArticle_SystemAccount");

                    b.HasOne("DAL.Entities.SystemAccount", "UpdatedBy")
                        .WithMany("NewsArticleUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("FK_NewsArticle_SystemAccount1");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("NewsTag", b =>
                {
                    b.HasOne("DAL.Entities.NewsArticle", null)
                        .WithMany()
                        .HasForeignKey("NewsArticleId")
                        .IsRequired()
                        .HasConstraintName("FK_NewsTag_NewsArticle");

                    b.HasOne("DAL.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_NewsTag_Tag");
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("NewsArticles");
                });

            modelBuilder.Entity("DAL.Entities.SystemAccount", b =>
                {
                    b.Navigation("NewsArticleCreatedBies");

                    b.Navigation("NewsArticleUpdatedBies");
                });
#pragma warning restore 612, 618
        }
    }
}
